import telebot
import os
import glob
from PIL import Image
import main
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import json
import tempfile
import uuid
import config
from deep_translator import GoogleTranslator
import re

bot = telebot.TeleBot(config.TELEGRAM_BOT_TOKEN)

user_headers = {}
user_landscape_orientation = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_query = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_found_images = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ

def translate_to_english(text):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        if re.match(r'^[a-zA-Z\s\-.,!?]+$', text.strip()):
            print(f"–¢–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {text}")
            return text, text
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏—Å–ø–æ–ª—å–∑—É—è GoogleTranslator
        translator = GoogleTranslator(source='auto', target='en')
        english_text = translator.translate(text)
        
        print(f"–ü–µ—Ä–µ–≤–æ–¥: '{text}' -> '{english_text}'")
        return text, english_text
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        return text, text

def search_images_unsplash(query, max_results=10):
    """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Unsplash API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        url = "https://api.unsplash.com/search/photos"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers = {
            "Authorization": f"Client-ID {config.UNSPLASH_ACCESS_KEY}",
            "Accept-Version": "v1"
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            "query": query,
            "page": 1,
            "per_page": min(max_results, 30),  # Unsplash –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞–∫—Å–∏–º—É–º 30 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            "orientation": "landscape"  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(url, headers=headers, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        if not data.get('results'):
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        images = []
        for photo in data['results']:
            image_info = {
                'image': photo['urls'].get(config.IMAGE_QUALITY, photo['urls']['regular']),
                'title': photo.get('description') or photo.get('alt_description', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
                'source': f"Unsplash - {photo['user']['name']}",
                'id': photo['id'],
                'width': photo['width'],
                'height': photo['height']
            }
            images.append(image_info)
        
        return images
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Unsplash: {e}")
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Unsplash: {e}")
        return []

def download_image(url, timeout=10):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL"""
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        response = requests.get(url, headers=headers, timeout=timeout, stream=True)
        response.raise_for_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        content_type = response.headers.get('content-type', '')
        if not content_type.startswith('image/'):
            return None
            
        return response.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

def create_image_choice_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞: –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="have_image")
    )
    keyboard.row(
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="search_image")
    )
    return keyboard

def create_image_approval_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", callback_data="approve_image"),
        InlineKeyboardButton("‚ùå –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ", callback_data="search_another")
    )
    return keyboard

def create_temp_image_file(image_data, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        temp_dir = f"temp_found_{user_id}"
        os.makedirs(temp_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        temp_path = os.path.join(temp_dir, f"found_image_{uuid.uuid4().hex}.jpg")
        with open(temp_path, 'wb') as f:
            f.write(image_data)
        
        return temp_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None

def process_found_image_automatically(user_id, chat_id):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if user_id not in user_found_images or user_id not in user_headers:
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = bot.send_message(chat_id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å process_image_file
        class FakeMessage:
            def __init__(self, chat_id):
                self.chat = type('Chat', (), {'id': chat_id})()
        
        fake_message = FakeMessage(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π file_info
        class FakeFileInfo:
            def __init__(self):
                self.file_path = "found_image.jpg"
        
        file_info = FakeFileInfo()
        found_data = user_found_images[user_id]['data']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        success = process_image_file(fake_message, file_info, user_id, found_data)
        
        if success:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                bot.delete_message(chat_id, processing_msg.message_id)
            except:
                pass
        
        return success
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        return False

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, 
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.\n\n"
        "üì± –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)\n"
        "üíº –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) –≤ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "üîç –ú–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash\n"
        "üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–∂—É –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–µ–∫—Å—Ç), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ.")

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id,
        "üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–µ–∫—Å—Ç)\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
        "   ‚Ä¢ ‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∑–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ\n"
        "   ‚Ä¢ üîç –ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –±–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ\n"
        "3Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª –ø–æ–∏—Å–∫:\n"
        "   ‚Ä¢ –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ!)\n"
        "   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
        "   ‚Ä¢ –ü–æ–ª—É—á–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å Unsplash\n"
        "   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–π–¥–∏ –¥—Ä—É–≥–æ–µ\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
        "   ‚Ä¢ üì± –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π - —Å–æ–∑–¥–∞—Å—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "   ‚Ä¢ üì± –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π + üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ - –≤—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é\n"
        "   ‚Ä¢ üíº –¢–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ - –≤—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é\n"
        "5Ô∏è‚É£ –ï—Å–ª–∏ —É —Ç–µ–±—è —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ñ–∞–π–ª:\n"
        "   ‚Ä¢ –§–æ—Ç–æ - –±—É–¥–µ—Ç —Å–∂–∞—Ç–æ Telegram\n"
        "   ‚Ä¢ –§–∞–π–ª - –±–µ–∑ —Å–∂–∞—Ç–∏—è, –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
        "6Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "   ‚Ä¢ üì± –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160) –∫–∞–∫ —Ñ–∞–π–ª\n"
        "   ‚Ä¢ üíº –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200):\n"
        "     - –ü–æ —Ü–µ–Ω—Ç—Ä—É\n"
        "     - –ü–æ –≤–µ—Ä—Ö—É\n"
        "     - –ü–æ –Ω–∏–∑—É\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")

@bot.message_handler(content_types=['text'])
def get_text(message):
    if message.text.startswith('/'):
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = user_state.get(user_id, 'waiting_header')
    
    if current_state == 'waiting_header':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        user_headers[user_id] = message.text
        user_landscape_orientation[user_id] = 'bottom'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_state[user_id] = 'choosing_image_source'
        
        bot.send_message(message.chat.id, 
            f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \"{message.text}\"\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏?",
            reply_markup=create_image_choice_keyboard())
    
    elif current_state == 'waiting_search_query':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_search_query[user_id] = message.text
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        original_query, english_query = translate_to_english(message.text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–≤–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
        if original_query != english_query:
            bot.send_message(message.chat.id, 
                f"üîÑ –ü–µ—Ä–µ–≤–æ–∂—É –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
                f"'{original_query}' ‚Üí '{english_query}'\n\n"
                f"üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        else:
            bot.send_message(message.chat.id, "üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        images = search_images_unsplash(english_query, max_results=config.DEFAULT_SEARCH_RESULTS)
        
        if not images:
            bot.send_message(message.chat.id, 
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                reply_markup=create_image_choice_keyboard())
            user_state[user_id] = 'choosing_image_source'
            return
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        downloaded_image = None
        selected_image_info = None
        
        for img_info in images:
            try:
                img_url = img_info.get('image')
                if img_url:
                    downloaded_image = download_image(img_url)
                    if downloaded_image:
                        selected_image_info = img_info
                        break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
                continue
        
        if not downloaded_image:
            bot.send_message(message.chat.id, 
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                reply_markup=create_image_choice_keyboard())
            user_state[user_id] = 'choosing_image_source'
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        user_found_images[user_id] = {
            'data': downloaded_image,
            'info': selected_image_info
        }
        user_state[user_id] = 'approving_image'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            if original_query != english_query:
                caption_text = f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n"
                caption_text += f"üá∑üá∫ '{original_query}' ‚Üí üá∫üá∏ '{english_query}'\n\n"
            else:
                caption_text = f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"{message.text}\"\n\n"
            
            if selected_image_info:
                caption_text += f"üì∑ {selected_image_info.get('source', 'Unsplash')}\n"
                if selected_image_info.get('title'):
                    caption_text += f"üìù {selected_image_info['title']}\n"
            caption_text += "\n–≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?"
            
            bot.send_photo(message.chat.id, downloaded_image, 
                caption=caption_text,
                reply_markup=create_image_approval_keyboard())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            bot.send_message(message.chat.id, 
                "–ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–µ.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º?",
                reply_markup=create_image_approval_keyboard())
    
    else:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        user_state[user_id] = 'waiting_header'
        user_headers[user_id] = message.text
        user_landscape_orientation[user_id] = 'bottom'
        user_state[user_id] = 'choosing_image_source'
        
        bot.send_message(message.chat.id, 
            f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \"{message.text}\"\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏?",
            reply_markup=create_image_choice_keyboard())

def safe_edit_message(chat_id, message_id, new_text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        bot.edit_message_text(new_text, chat_id=chat_id, message_id=message_id)
        return True
    except telebot.apihelper.ApiException as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            return True
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API
            print(f"API Error: {e}")
            return False
    except Exception as e:
        print(f"Edit message error: {e}")
        return False

def process_image_file(message, file_info, user_id, found_image_data=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–æ—Ç–æ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if found_image_data:
            downloaded_file = found_image_data
        else:
            downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        temp_img_dir = f"temp_img_{user_id}"
        temp_logo_dir = f"temp_logo_{user_id}"
        temp_output_dir = f"temp_output_{user_id}"
        
        os.makedirs(temp_img_dir, exist_ok=True)
        os.makedirs(temp_logo_dir, exist_ok=True)
        os.makedirs(temp_output_dir, exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if found_image_data:
            file_ext = '.jpg'  # –î–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º jpg
        else:
            file_ext = os.path.splitext(file_info.file_path)[1].lower()
            if not file_ext:
                file_ext = '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        input_path = os.path.join(temp_img_dir, f"user_image{file_ext}")
        with open(input_path, 'wb') as f:
            f.write(downloaded_file)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏
        logo_files = glob.glob(os.path.join(main.LOGO_DIR, '*'))
        if not logo_files:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        logo_path = os.path.join(temp_logo_dir, "logo.png")
        logo_img = Image.open(logo_files[0])
        logo_img.save(logo_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
        logo_img = main.safe_open_image(logo_path)
        if logo_img is None:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø!")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        orientation = user_landscape_orientation.get(user_id, 'bottom')
        print(f"DEBUG: process_image_file: orientation={orientation}")
        
        if orientation == 'social_only':
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
            success = main.process_single_image_social_only(input_path, logo_img, user_headers[user_id])
        elif orientation.startswith('both_'):
            # –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
            landscape_orientation = orientation.split('_')[1]
            landscape_config = {
                'center': main.CONFIG_LANDSCAPE_CENTER,
                'top': main.CONFIG_LANDSCAPE_TOP,
                'bottom': main.CONFIG_LANDSCAPE_BOTTOM
            }.get(landscape_orientation, main.CONFIG_LANDSCAPE_BOTTOM)
            print(f"DEBUG: –†–µ–∂–∏–º 'both': –≤—ã–±—Ä–∞–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è '{landscape_orientation}', –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {landscape_config.get('image_alignment', 'unknown')}")
            print(f"DEBUG: landscape_config = {landscape_config}")
            success = main.process_single_image(input_path, logo_img, user_headers[user_id], landscape_config)
        elif orientation.startswith('investor_only_'):
            # –¢–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
            landscape_orientation = orientation.split('_')[2]  # –ë–µ—Ä–µ–º —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç: investor_only_center -> center
            print(f"DEBUG: investor_only: landscape_orientation = {landscape_orientation}")
            print(f"DEBUG: investor_only: main.CONFIG_LANDSCAPE_CENTER = {main.CONFIG_LANDSCAPE_CENTER}")
            landscape_config = {
                'center': main.CONFIG_LANDSCAPE_CENTER,
                'top': main.CONFIG_LANDSCAPE_TOP,
                'bottom': main.CONFIG_LANDSCAPE_BOTTOM
            }.get(landscape_orientation, main.CONFIG_LANDSCAPE_BOTTOM)
            print(f"DEBUG: investor_only: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è = {landscape_config}")
            success = main.process_single_image_investor_only_single(input_path, logo_img, user_headers[user_id], landscape_config)

        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            bot.send_message(message.chat.id, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ output –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_files = os.listdir(main.OUTPUT_DIR)
            print(f"DEBUG: –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ output –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {all_files}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            base_name = os.path.splitext(os.path.basename(input_path))[0]
            print(f"DEBUG: base_name = {base_name}")
            print(f"DEBUG: input_path = {input_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö)
            orientation_names = {
                'center': '–ø–æ —Ü–µ–Ω—Ç—Ä—É',
                'top': '–ø–æ –≤–µ—Ä—Ö—É', 
                'bottom': '–ø–æ –Ω–∏–∑—É'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if orientation == 'social_only':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
                square_path = os.path.join(main.OUTPUT_DIR, f"{base_name}_square.png")
                if os.path.exists(square_path):
                    with open(square_path, 'rb') as f:
                        bot.send_document(message.chat.id, f, 
                                       caption="üì± –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)")
                else:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                bot.send_message(message.chat.id, 
                    "üéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º:\n"
                    f"\"{user_headers[user_id]}\"\n\n"
                    f"üì± –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            
            elif orientation.startswith('both_'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
                square_path = os.path.join(main.OUTPUT_DIR, f"{base_name}_square.png")
                if os.path.exists(square_path):
                    with open(square_path, 'rb') as f:
                        bot.send_document(message.chat.id, f, 
                                       caption="üì± –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)")
                else:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
                landscape_orientation = orientation.split('_')[1]
                landscape_path = os.path.join(main.OUTPUT_DIR, f"{base_name}_landscape_{landscape_orientation}.png")
                print(f"DEBUG: –ò—â–µ–º —Ñ–∞–π–ª: {landscape_path}")
                print(f"DEBUG: –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(landscape_path)}")
                if os.path.exists(landscape_path):
                    with open(landscape_path, 'rb') as f:
                        orientation_name = orientation_names.get(landscape_orientation, '–ø–æ –Ω–∏–∑—É')
                        bot.send_document(message.chat.id, f, 
                                       caption=f"üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) - {orientation_name}")
                else:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    all_files = os.listdir(main.OUTPUT_DIR)
                    print(f"DEBUG: –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ output: {all_files}")
                    print(f"DEBUG: –ò—â–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º –∏–º–µ–Ω–µ–º: {base_name}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                orientation_name = orientation_names.get(landscape_orientation, '–ø–æ –Ω–∏–∑—É')
                
                bot.send_message(message.chat.id, 
                    "üéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º:\n"
                    f"\"{user_headers[user_id]}\"\n\n"
                    f"üì± –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)\n"
                    f"üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) - {orientation_name}\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            
            elif orientation.startswith('investor_only_'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
                landscape_orientation = orientation.split('_')[2]  # –ë–µ—Ä–µ–º —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç: investor_only_center -> center
                landscape_path = os.path.join(main.OUTPUT_DIR, f"{base_name}_landscape_{landscape_orientation}.png")
                if os.path.exists(landscape_path):
                    with open(landscape_path, 'rb') as f:
                        orientation_name = orientation_names.get(landscape_orientation, '–ø–æ –Ω–∏–∑—É')
                        bot.send_document(message.chat.id, f, 
                                       caption=f"üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) - {orientation_name}")
                else:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                orientation_name = orientation_names.get(landscape_orientation, '–ø–æ –Ω–∏–∑—É')
                
                bot.send_message(message.chat.id, 
                    "üéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º:\n"
                    f"\"{user_headers[user_id]}\"\n\n"
                    f"üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) - {orientation_name}\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            

            
            return True
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return False
    
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        bot.send_message(message.chat.id, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return False
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if 'temp_img_dir' in locals():
                for file in os.listdir(temp_img_dir):
                    os.remove(os.path.join(temp_img_dir, file))
                os.rmdir(temp_img_dir)
            
            if 'temp_logo_dir' in locals():
                for file in os.listdir(temp_logo_dir):
                    os.remove(os.path.join(temp_logo_dir, file))
                os.rmdir(temp_logo_dir)
            
            if 'temp_output_dir' in locals():
                for file in os.listdir(temp_output_dir):
                    os.remove(os.path.join(temp_output_dir, file))
                os.rmdir(temp_output_dir)
        except:
            pass
        
def create_orientation_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üì± –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π", callback_data="social_only")
    )
    keyboard.row(
        InlineKeyboardButton("üì± –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π + üíº –î–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞", callback_data="both")
    )
    keyboard.row(
        InlineKeyboardButton("üíº –¢–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞", callback_data="investor_only")
    )
    return keyboard

def create_landscape_orientation_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üíº –ü–æ —Ü–µ–Ω—Ç—Ä—É", callback_data="orientation_center"),
        InlineKeyboardButton("üíº –ü–æ –≤–µ—Ä—Ö—É", callback_data="orientation_top")
    )
    keyboard.row(
        InlineKeyboardButton("üíº –ü–æ –Ω–∏–∑—É", callback_data="orientation_bottom")
    )
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data in ['have_image', 'search_image'])
def handle_image_source_choice(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = call.from_user.id
    
    if user_id not in user_headers:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!")
        return
    
    choice = call.data
    
    if choice == 'have_image':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        user_state[user_id] = 'choosing_orientation'
        bot.answer_callback_query(call.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º —Å –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        bot.edit_message_text(
            f"‚úÖ –•–æ—Ä–æ—à–æ! –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=create_orientation_keyboard()
        )
    
    elif choice == 'search_image':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        user_state[user_id] = 'waiting_search_query'
        bot.answer_callback_query(call.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞")
        bot.edit_message_text(
            f"üîç –•–æ—Ä–æ—à–æ! –ù–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: \"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\", \"–±–∏–∑–Ω–µ—Å\", \"—Ñ–∏–Ω–∞–Ω—Å—ã\", \"–æ—Ñ–∏—Å\", \"–∫–æ–º–∞–Ω–¥–∞\", \"—É—Å–ø–µ—Ö\" –∏ —Ç.–¥.\n\n"
            "üåê –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞!",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )

@bot.callback_query_handler(func=lambda call: call.data in ['approve_image', 'search_another'])
def handle_image_approval(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = call.from_user.id
    
    if user_id not in user_headers:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!")
        return
    
    choice = call.data
    
    if choice == 'approve_image':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        user_state[user_id] = 'choosing_orientation_found'
        bot.answer_callback_query(call.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ!")
        bot.edit_message_caption(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ.\n\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=create_orientation_keyboard()
        )
    
    elif choice == 'search_another':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        user_state[user_id] = 'waiting_search_query'
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        bot.edit_message_caption(
            f"üîç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ):\n\n"
            "üåê –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞!",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )

@bot.callback_query_handler(func=lambda call: call.data in ['social_only', 'both', 'investor_only'])
def handle_processing_choice(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    user_id = call.from_user.id
    
    if user_id not in user_headers:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!")
        return
    
    choice = call.data
    
    if choice == 'social_only':
        # –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
        user_landscape_orientation[user_id] = 'social_only'
        bot.answer_callback_query(call.id, "–í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_id in user_found_images:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if call.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
                bot.edit_message_caption(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π!\n\n"
                    f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                    "–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n\n"
                    "–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç:\n"
                    "üì± –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown'
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
                bot.edit_message_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π!\n\n"
                    f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                    "–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n\n"
                    "–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç:\n"
                    "üì± –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown'
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            success = process_found_image_automatically(user_id, call.message.chat.id)
            
            if success:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                user_headers.pop(user_id, None)
                user_landscape_orientation.pop(user_id, None)
                user_search_query.pop(user_id, None)
                user_found_images.pop(user_id, None)
                user_state.pop(user_id, None)
        else:
            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if call.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
                bot.edit_message_caption(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π!\n\n"
                    f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
                    "–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç:\n"
                    "üì± –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown'
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
                bot.edit_message_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π!\n\n"
                    f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
                    "–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç:\n"
                    "üì± –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown'
                )
    
    elif choice == 'both':
        # –î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        user_landscape_orientation[user_id] = 'both'
        bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if call.message.photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
            bot.edit_message_caption(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞!\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown',
                reply_markup=create_landscape_orientation_keyboard()
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
            bot.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞!\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown',
                reply_markup=create_landscape_orientation_keyboard()
            )
    
    elif choice == 'investor_only':
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        user_landscape_orientation[user_id] = 'investor_only'
        bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if call.message.photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
            bot.edit_message_caption(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞!\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown',
                reply_markup=create_landscape_orientation_keyboard()
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
            bot.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞!\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown',
                reply_markup=create_landscape_orientation_keyboard()
            )

@bot.callback_query_handler(func=lambda call: call.data.startswith('orientation_'))
def handle_landscape_orientation_choice(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞"""
    user_id = call.from_user.id
    
    if user_id not in user_headers:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö)
    orientation_names = {
        'center': '–ø–æ —Ü–µ–Ω—Ç—Ä—É',
        'top': '–ø–æ –≤–µ—Ä—Ö—É', 
        'bottom': '–ø–æ –Ω–∏–∑—É'
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    orientation = call.data.split('_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–µ–µ
    current_mode = user_landscape_orientation.get(user_id, '')
    
    if current_mode == 'both':
        user_landscape_orientation[user_id] = f'both_{orientation}'
        mode_text = "—Å–æ—Ü—Å–µ—Ç–µ–π + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞"
        result_text = f"üì± –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)\nüíº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) - {orientation_names[orientation]}"
    elif current_mode == 'investor_only':
        user_landscape_orientation[user_id] = f'investor_only_{orientation}'
        mode_text = "—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞"
        result_text = f"üíº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) - {orientation_names[orientation]}"
    else:
        # Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        user_landscape_orientation[user_id] = f'both_{orientation}'
        mode_text = "—Å–æ—Ü—Å–µ—Ç–µ–π + –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞"
        result_text = f"üì± –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (2160x2160)\nüíº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞ (2310x1200) - {orientation_names[orientation]}"
    
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orientation_names[orientation]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if user_id in user_found_images:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if call.message.photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
            bot.edit_message_caption(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞: **{orientation_names[orientation]}**\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                f"–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n\n"
                f"–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è {mode_text}:\n"
                f"{result_text}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
            bot.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞: **{orientation_names[orientation]}**\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                f"–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n\n"
                f"–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è {mode_text}:\n"
                f"{result_text}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        success = process_found_image_automatically(user_id, call.message.chat.id)
        
        if success:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            user_headers.pop(user_id, None)
            user_landscape_orientation.pop(user_id, None)
            user_search_query.pop(user_id, None)
            user_found_images.pop(user_id, None)
            user_state.pop(user_id, None)
    else:
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if call.message.photo:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption
            bot.edit_message_caption(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞: **{orientation_names[orientation]}**\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
                f"–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è {mode_text}:\n"
                f"{result_text}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
            bot.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–ø–æ—Ä—Ç–∞–ª–∞: **{orientation_names[orientation]}**\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: \"{user_headers[user_id]}\"\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n"
                f"–ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è {mode_text}:\n"
                f"{result_text}",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown'
            )

@bot.message_handler(content_types=['photo'])
def get_photo(message):
    user_id = message.from_user.id
    if user_id not in user_headers:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = user_state.get(user_id, 'choosing_orientation')
    if current_state not in ['choosing_orientation', 'choosing_orientation_found']:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = bot.send_message(message.chat.id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if current_state == 'choosing_orientation_found' and user_id in user_found_images:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            found_data = user_found_images[user_id]['data']
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π file_info –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            class FakeFileInfo:
                def __init__(self):
                    self.file_path = "found_image.jpg"
            
            file_info = FakeFileInfo()
            success = process_image_file(message, file_info, user_id, found_data)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_info = bot.get_file(message.photo[-1].file_id)
            if not file_info.file_path:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ.")
                return
            
            success = process_image_file(message, file_info, user_id)
        
        if success:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                bot.delete_message(message.chat.id, processing_msg.message_id)
            except:
                pass
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        bot.send_message(message.chat.id, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_headers.pop(user_id, None)
        user_landscape_orientation.pop(user_id, None)
        user_search_query.pop(user_id, None)
        user_found_images.pop(user_id, None)
        user_state.pop(user_id, None)

@bot.message_handler(content_types=['document'])
def get_document(message):
    user_id = message.from_user.id
    if user_id not in user_headers:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = user_state.get(user_id, 'choosing_orientation')
    if current_state not in ['choosing_orientation', 'choosing_orientation_found']:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    allowed_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp']
    file_ext = os.path.splitext(message.document.file_name)[1].lower()
    
    if file_ext not in allowed_extensions:
        bot.send_message(message.chat.id, 
            f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(allowed_extensions)}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = bot.send_message(message.chat.id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if current_state == 'choosing_orientation_found' and user_id in user_found_images:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            found_data = user_found_images[user_id]['data']
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π file_info –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            class FakeFileInfo:
                def __init__(self):
                    self.file_path = "found_image.jpg"
            
            file_info = FakeFileInfo()
            success = process_image_file(message, file_info, user_id, found_data)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file_info = bot.get_file(message.document.file_id)
            if not file_info.file_path:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
                return
            
            success = process_image_file(message, file_info, user_id)
        
        if success:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            try:
                bot.delete_message(message.chat.id, processing_msg.message_id)
            except:
                pass
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        bot.send_message(message.chat.id, 
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_headers.pop(user_id, None)
        user_landscape_orientation.pop(user_id, None)
        user_search_query.pop(user_id, None)
        user_found_images.pop(user_id, None)
        user_state.pop(user_id, None)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if not message.text.startswith('/'):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_headers.pop(user_id, None)
        user_landscape_orientation.pop(user_id, None)
        user_search_query.pop(user_id, None)
        user_found_images.pop(user_id, None)
        user_state.pop(user_id, None)
        
        bot.send_message(message.chat.id, 
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Ç–µ–∫—Å—Ç), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ.")

if __name__ == "__main__":
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
    print("‚å®Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    try:
        bot.polling(none_stop=True, timeout=60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É") 